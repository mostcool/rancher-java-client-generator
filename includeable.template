package io.rancher.service{{if ne .packageName ""}}.{{.packageName}}{{end}};

import io.rancher.base.Filters;
import io.rancher.base.TypeCollection;
import io.rancher.type{{if ne .packageName ""}}.{{.packageName}}{{end}}.{{$.class}};{{range $import := .meta.ListActionImports}}
import {{$import}};{{end}}

import retrofit2.Call;
import retrofit2.http.Body;
import retrofit2.http.DELETE;
import retrofit2.http.GET;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Path;
import retrofit2.http.QueryMap;
import okhttp3.ResponseBody;

public interface {{.classNamePrefix}}Service {

    @GET("{{.prefix}}/{projectId}/{{.type}}")
    Call
    <TypeCollection<{{.class}}>> list(@Path("projectId") String projectId);

    @GET("{{.prefix}}/{projectId}/{{.type}}")
    Call
    <TypeCollection<{{.class}}>> list(@Path("projectId") String projectId, @QueryMap Filters filters);

    @GET("{{.prefix}}/{projectId}/{{.type}}/{id}")
    Call<{{.class}}> get(@Path("projectId") String projectId, @Path("id") String id);

    @POST("{{.prefix}}/{projectId}/{{.type}}")
    Call<{{.class}}> create(@Path("projectId") String projectId, @Body {{.class}} {{.type}});

    @PUT("{{.prefix}}/{projectId}/{{.type}}/{id}")
    Call<{{.class}}> update(@Path("projectId") String projectId, @Path("id") String id, @Body {{.class}} {{.type}});

    @DELETE("{{.prefix}}/{projectId}/{{.type}}/{id}")
    Call
    <ResponseBody> delete(@Path("projectId") String projectId, @Path("id") String id);
    {{range $key, $value := .resourceActions}}
    @POST("{{$.prefix}}/{projectId}/{{$.type}}/{id}?action={{$key}}"){{if eq $value.Input "" }}
    Call<{{.Output | capitalize}}> {{$key}}(@Path("projectId") String projectId, @Path("id") String id);
    {{else}}
    Call<{{.Output | capitalize}}> {{$key}}(@Path("projectId") String projectId, @Path("id") String id, @Body {{.Input | capitalize}} {{.Input}});
    {{end}}{{end}}
}